from manim import *

class HarmonicAddition(Scene):
    def construct(self):
        sin_color = MAROON_C
        cos_color = GREEN_C
        sum_color = YELLOW_D
        indicate_color = YELLOW_C
        plane_color = BLUE_C
        
        title = MathTex("\\mathbb{H}\\mathrm{armonic}\\ \\mathbb{A}\\mathrm{ddition}\\ \\mathbb{T}\\mathrm{heorem}").move_to([0, 2, 0]).scale(1.5).set_color_by_gradient(BLUE, TEAL, GREEN)

        f1 = MathTex("a\\sin\\theta", "+", "b\\cos\\theta", "=",  "\\sqrt{a^2+b^2} \\sin(\\theta + \\alpha)", "=", "\\sqrt{a^2+b^2} \\cos(\\theta - \\beta)").move_to([0, -0.5, 0])
        o = Dot(point=ORIGIN, radius = 0.1).move_to([-4.5, -2.5, 0]).set_z_index(1)
        text_o = Text("O").next_to(o, 0.2*LEFT + 0.2*DOWN).scale(0.6)
        plane = NumberPlane(x_length = 15, x_range = [-3, 12, 1], y_length = 8, y_range = [-2.5, 5.5, 1], background_line_style={"stroke_color": plane_color, "stroke_width": 3.5, "stroke_opacity": 0.4}).move_to([0, -1, 0])
        line = Line(config.left_side, config.right_side, stroke_width = 1).move_to([0, 3, 0])
        vec_sin = Vector([6, 0], color = sin_color).move_to([-1.5, -2.5, 0])
        vec_cos = Vector([0, 4], color = cos_color).move_to([-4.5, -0.5, 0])
        right = RightAngle(vec_sin, vec_cos)
        text_sin = MathTex("a\\sin\\theta", color = sin_color).next_to(vec_sin, RIGHT+[0, -0.1, 0]).scale(1.1)
        text_cos = MathTex("b\\cos\\theta", color = cos_color).next_to(vec_cos, 1.5*UP).scale(1.1)
        dash_sin = DashedLine([1.5, -2.5, 0], [1.5, 1.5, 0], dash_length = 0.2)
        dash_cos = DashedLine([-4.5, 1.5, 0], [1.5, 1.5, 0], dash_length = 0.2)
        brace_sin = Brace(vec_sin, color = sin_color)
        brace_cos = Brace(vec_cos, direction=vec_cos.copy().rotate(PI / 2).get_unit_vector(), color = cos_color)
        btext_sin = MathTex("a", color = sin_color).next_to(brace_sin, 0.5*DOWN).scale(1.2)
        btext_cos = MathTex("b", color = cos_color).next_to(brace_cos, 0.5*LEFT).scale(1.2)
        vec_sum = Vector([6, 4], color = sum_color).move_to([-1.5, -0.5, 0])
        text_sum = MathTex("a\\sin\\theta + b\\cos\\theta", color = sum_color).next_to(vec_sum, RIGHT + UP).shift([-1, 0.5, 0])
        brace_sum = Brace(vec_sum, direction=vec_sum.copy().rotate(PI / 2).get_unit_vector(), color = sum_color)
        btext_sum = MathTex("\\sqrt{a^2+b^2}", color = sum_color).next_to(brace_sum, LEFT).shift([3.45, 0.7, 0])
        alpha = Angle(vec_sin, vec_sum, radius = 0.75)
        atext = MathTex("\\alpha").next_to(alpha).shift([0.1, 0.1, 0])
        
        text_sum_sin = MathTex("\\sqrt{a^2+b^2}\\sin(\\theta + \\alpha)", color = sum_color).move_to(text_sum.get_center()+[0, -0.5, 0])
        
        sin_alpha = MathTex("\\sin", "\\alpha", "= \\frac{b}{\\sqrt{a^2+b^2}}").move_to([3.55, 0, 0])
        cos_alpha = MathTex("\\cos", "\\alpha", "= \\frac{a}{\\sqrt{a^2+b^2}}").move_to([3.55, -1.5, 0])
        sin_alpha[2][1].set_fill(color = cos_color)
        sin_alpha[2][3:].set_fill(color =  sum_color)
        cos_alpha[2][1].set_fill(color =  sin_color)
        cos_alpha[2][3:].set_fill(color =  sum_color)
        
        beta = Angle(vec_cos, vec_sum, radius = 0.75, other_angle = True)
        btext = MathTex("\\beta").next_to(beta).shift([-0.5, 0.5, 0])

        text_ab = MathTex("\\alpha = \\frac{\\pi}{2} - \\beta").move_to([-1, -1.75, 0])
        text_sum_cos1 = MathTex("\\sqrt{a^2+b^2}\\sin(\\theta + \\frac{\\pi}{2} - \\beta)", color = sum_color).move_to(text_sum.get_center()+0.45*RIGHT+0.1*DOWN+[0, -0.5, 0])
        text_sum_cos2 = MathTex("\\sqrt{a^2+b^2}\\cos(\\theta - \\beta)", color = sum_color).move_to(text_sum.get_center()+[0, -0.5, 0])
        
        cos_beta1 = MathTex("\\sin", "(\\frac{\\pi}{2} - \\beta)", "= \\frac{b}{\\sqrt{a^2+b^2}}").move_to([3.55, 0, 0]).shift(0.65*RIGHT)
        sin_beta1 = MathTex("\\cos", "(\\frac{\\pi}{2} - \\beta)", "= \\frac{a}{\\sqrt{a^2+b^2}}").move_to([3.55, -1.5, 0]).shift(0.65*RIGHT)
        cos_beta2 = MathTex("\\cos", "\\beta", "= \\frac{b}{\\sqrt{a^2+b^2}}").move_to([3.55, 0, 0]).move_to([3.55, 0, 0])
        sin_beta2 = MathTex("\\sin", "\\beta", "= \\frac{a}{\\sqrt{a^2+b^2}}").move_to([3.55, -1.5, 0])
        cos_beta1[2][1].set_fill(color = cos_color)
        cos_beta1[2][3:].set_fill(color =  sum_color)
        sin_beta1[2][1].set_fill(color =  sin_color)
        sin_beta1[2][3:].set_fill(color =  sum_color)
        cos_beta2[2][1].set_fill(color = cos_color)
        cos_beta2[2][3:].set_fill(color =  sum_color)
        sin_beta2[2][1].set_fill(color =  sin_color)
        sin_beta2[2][3:].set_fill(color =  sum_color)
    

        self.wait()
        self.play(Write(title))
        self.wait()
        self.play(FadeOut(title))
        self.wait()
        self.play(Write(f1))
        self.wait()
        self.play(f1[0].animate.set_color(sin_color), f1[2].animate.set_color(cos_color), f1[4].animate.set_color(sum_color), f1[6].animate.set_color(sum_color), run_time = 0.75)
        self.wait()
        self.play(f1.animate.move_to([0, 3.5, 0]), run_time = 0.75)
        self.play(Create(o), Create(text_o), Create(plane), Create(line), run_time = 0.75)
        self.wait(0.75)
        self.play(Create(vec_sin), Create(vec_cos), Create(right), run_time = 1)
        self.wait()
        self.play(Write(text_sin), Write(text_cos))
        self.wait()
        self.play(Write(brace_sin), Write(brace_cos), Write(btext_sin), Write(btext_cos))
        self.wait()
        self.play(FadeOut(brace_sin, brace_cos), text_sin.animate.next_to(vec_sin, DOWN), text_cos.animate.next_to(vec_cos, LEFT),
                  btext_sin.animate.move_to([1.5, -2.9, 0]), btext_cos.animate.move_to([-4.9, 1.5, 0]))
        self.wait()
        self.play(Create(dash_sin), Create(dash_cos), Uncreate(right))
        self.wait()
        self.play(Create(vec_sum))
        self.wait()
        self.play(Write(text_sum))
        self.wait()
        self.play(Write(brace_sum), Write(btext_sum))
        self.wait()
        self.play(FadeOut(brace_sum), btext_sum.animate.shift([0, -0.6, 0]), text_sum.animate.shift([0, -0.5, 0]))
        self.wait()
        self.play(Create(alpha), Write(atext))
        self.wait()
        self.play(Indicate(text_sum, color = indicate_color))
        self.wait()
        self.play(ReplacementTransform(text_sum, text_sum_sin))
        self.wait(2)
        self.play(Write(sin_alpha), Write(cos_alpha))
        self.wait(3)
        self.play(Create(beta), Create(btext))
        self.wait()
        self.play(Write(text_ab))
        self.wait()
        self.play(Indicate(text_ab, color = indicate_color))
        self.wait()
        self.play(Indicate(text_sum_sin, color = indicate_color), Indicate(sin_alpha, color = indicate_color), Indicate(cos_alpha, color = indicate_color))
        self.wait()
        self.play(ReplacementTransform(text_sum_sin, text_sum_cos1),
                  ReplacementTransform(sin_alpha, cos_beta1),
                  ReplacementTransform(cos_alpha, sin_beta1))
        self.wait(3)
        self.play(ReplacementTransform(text_sum_cos1, text_sum_cos2),
                  ReplacementTransform(cos_beta1, cos_beta2),
                  ReplacementTransform(sin_beta1, sin_beta2))
        self.wait(4)



class Example(Scene):
    def construct(self):
        sin_color = MAROON_C
        cos_color = GREEN_C
        sum_color = YELLOW_D
        indicate_color = YELLOW_C
        plane_color = BLUE_C
        
        title = MathTex("\\mathbb{A}\\mathrm{n}\\ \\mathbb{E}\\mathrm{xample}\\ \\mathrm{of}\\ \\mathbb{H}\\mathrm{armonic}\\ \\mathbb{A}\\mathrm{ddition}\\ \\mathbb{T}\\mathrm{heorem}").move_to([0, 2, 0]).scale(1.25).set_color_by_gradient(RED, PURPLE, BLUE, TEAL, GREEN)

        f1 = MathTex("\\sqrt{3}\\sin\\theta", "+", "\\cos\\theta", "=",  "2\\sin(\\theta + \\frac{\\pi}{6})").shift([0, -0.5, 0])
        o = Dot(point=ORIGIN, radius = 0.1).move_to([-4.5, -2.5, 0]).set_z_index(1)
        text_o = Text("O").next_to(o, 0.2*LEFT + 0.2*DOWN).scale(0.6)
        plane = NumberPlane(x_length = 15, x_range = [-3, 12, 1], y_length = 8, y_range = [-2.5, 5.5, 1], background_line_style={"stroke_color": plane_color, "stroke_width": 3.5, "stroke_opacity": 0.4}).move_to([0, -1, 0])
        line = Line(config.left_side, config.right_side, stroke_width = 1).move_to([0, 3, 0])
        vec_sin = Vector([6.9282032303, 0], color = sin_color).move_to([-1, -2.5, 0])
        vec_cos = Vector([0, 4], color = cos_color).move_to([-4.5, -0.5, 0])
        right = RightAngle(vec_sin, vec_cos)
        text_sin = MathTex("\\sqrt{3}\\sin\\theta", color = sin_color).next_to(vec_sin, RIGHT+[0, -0.1, 0]).scale(1.1)
        text_cos = MathTex("\\cos\\theta", color = cos_color).next_to(vec_cos, 1.5*UP).scale(1.1)
        dash_sin = DashedLine([2.48, -2.5, 0], [2.48, 1.5, 0], dash_length = 0.2)
        dash_cos = DashedLine([-4.5, 1.5, 0], [2.48, 1.5, 0], dash_length = 0.2)
        brace_sin = Brace(vec_sin, color = sin_color)
        brace_cos = Brace(vec_cos, direction=vec_cos.copy().rotate(PI / 2).get_unit_vector(), color = cos_color)
        btext_sin = MathTex("\\sqrt{3}", color = sin_color).next_to(brace_sin, 0.5*DOWN)
        btext_cos = MathTex("1", color = cos_color).next_to(brace_cos, 0.5*LEFT)
        vec_sum = Vector([6.9282032303, 4], color = sum_color).move_to([-1, -0.5, 0])
        text_sum = MathTex("\\sqrt{3}\\sin\\theta + \\cos\\theta", color = sum_color).next_to(vec_sum, RIGHT + UP).shift([-1, 0.5, 0])
        brace_sum = Brace(vec_sum, direction=vec_sum.copy().rotate(PI / 2).get_unit_vector(), color = sum_color)
        
        btext_sum1 = MathTex("\\sqrt{\\sqrt{3}^{2} + 1^2}", color = sum_color).next_to(brace_sum, LEFT).shift([3.5, 0.6, 0])
        btext_sum1[0][2:5].set_fill(color = sin_color)
        btext_sum1[0][7].set_fill(color = cos_color)
        btext_sum1[0][5:7].set_fill(color = WHITE)
        btext_sum1[0][8].set_fill(color = WHITE)
        btext_sum2 = MathTex("\\sqrt{4}", color = sum_color).next_to(brace_sum, LEFT).shift([3.5, 0.6, 0])
        btext_sum3 = MathTex("2", color = sum_color).next_to(brace_sum, LEFT).shift([3.5, 0.6, 0])

        alpha = Angle(vec_sin, vec_sum, radius = 0.75)
        atext = MathTex("\\alpha").next_to(alpha).shift([0.1, 0.1, 0])
        avalue = MathTex("\\alpha = \\frac{\\pi}{6}")
        
        text_sum_sin1 = MathTex("2\\sin(\\theta + \\alpha)", color = sum_color).move_to(text_sum.get_center()+[0, -0.5, 0])
        text_sum_sin2 = MathTex("2\\sin(\\theta + \\frac{\\pi}{6})", color = sum_color).move_to(text_sum.get_center()+[0, -0.5, 0])
        
        sin_alpha = MathTex("\\sin", "\\alpha", "= \\frac{1}{2}").move_to([4.75, 0.5, 0]).scale(1.2)
        cos_alpha = MathTex("\\cos", "\\alpha", "= \\frac{\\sqrt{3}}{2}").move_to([4.75, -1.5, 0]).scale(1.2)
        sin_alpha[2][1].set_fill(color = cos_color)
        sin_alpha[2][3:].set_fill(color =  sum_color)
        cos_alpha[2][1:4].set_fill(color =  sin_color)
        cos_alpha[2][5:].set_fill(color =  sum_color)
    

        self.wait()
        self.play(Write(title))
        self.wait()
        self.play(FadeOut(title))
        self.wait()
        self.play(Write(f1))
        self.wait()
        self.play(f1[0].animate.set_color(sin_color), f1[2].animate.set_color(cos_color), f1[4].animate.set_color(sum_color), run_time = 0.75)
        self.wait()
        self.play(f1.animate.move_to([0, 3.5, 0]), run_time = 0.75)
        self.play(Create(o), Create(text_o), Create(plane), Create(line), run_time = 0.75)
        self.wait(0.75)
        self.play(Create(vec_sin), Create(vec_cos), Create(right), run_time = 1)
        self.wait()
        self.play(Write(text_sin), Write(text_cos))
        self.wait()
        self.play(Write(brace_sin), Write(brace_cos), Write(btext_sin), Write(btext_cos))
        self.wait()
        self.play(FadeOut(brace_sin, brace_cos), text_sin.animate.next_to(vec_sin, DOWN), text_cos.animate.next_to(vec_cos, LEFT),
                  btext_sin.animate.move_to([2.4, -2.9, 0]), btext_cos.animate.move_to([-4.9, 1.5, 0]))
        self.wait()
        self.play(Create(dash_sin), Create(dash_cos), Uncreate(right))
        self.wait()
        self.play(Create(vec_sum))
        self.wait()
        self.play(Write(text_sum))
        self.wait()
        self.play(Write(brace_sum), Write(btext_sum1))
        self.wait()
        self.play(ReplacementTransform(btext_sum1, btext_sum2))
        self.wait()
        self.play(ReplacementTransform(btext_sum2, btext_sum3))
        self.wait()
        self.play(FadeOut(brace_sum), btext_sum3.animate.shift([0.25, -0.6, 0]), text_sum.animate.shift([0, -0.5, 0]))
        self.wait()
        self.play(Create(alpha), Write(atext))
        self.wait()
        self.play(Indicate(text_sum, color = indicate_color))
        self.wait()
        self.play(ReplacementTransform(text_sum, text_sum_sin1))
        self.wait(2)
        self.play(Write(sin_alpha), Write(cos_alpha))
        self.wait(3)
        self.play(ReplacementTransform(atext, avalue.next_to(alpha).shift([0.1, 0.1, 0])))
        self.wait(2)
        self.play(Indicate(avalue, color = indicate_color))
        self.wait()
        self.play(Indicate(text_sum_sin1, color = indicate_color))
        self.wait()
        self.play(ReplacementTransform(text_sum_sin1, text_sum_sin2))
        self.wait(4)
